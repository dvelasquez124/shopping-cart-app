{{!-- Admin: manage products (uses existing REST API) --}}

<div class="d-flex justify-content-between align-items-center mb-3">
  <h1 class="h4 mb-0">Admin — Products</h1>
  <div class="text-muted small">Signed in as {{currentUser.email}}</div>
</div>

<div class="mb-4">
  <a class="btn btn-sm btn-outline-secondary me-2" href="/admin">Customers</a>
  <a class="btn btn-sm btn-primary" href="/admin/products">Products</a>
</div>

{{!-- Create new product --}}
<div class="card mb-4">
  <div class="card-body">
    <h2 class="h6 mb-3">Add Product</h2>
    <form id="createForm" class="row g-2">
      <div class="col-12 col-md-3">
        <input class="form-control" name="name" placeholder="Name" required />
      </div>
      <div class="col-12 col-md-4">
        <input class="form-control" name="description" placeholder="Description" />
      </div>
      <div class="col-6 col-md-2">
        <input class="form-control" name="price" type="number" step="0.01" min="0" placeholder="Price" required />
      </div>
      <div class="col-6 col-md-2">
        <input class="form-control" name="quantityInStock" type="number" step="1" min="0" placeholder="Stock" required />
      </div>
      <div class="col-12 col-md-1 d-grid">
        <button class="btn btn-success">Add</button>
      </div>
    </form>
    <div id="createMsg" class="small mt-2 text-muted"></div>
  </div>
</div>

{{!-- Existing products --}}
{{#if hasProducts}}
  <div class="table-responsive">
    <table class="table table-sm align-middle">
      <thead>
        <tr>
          <th style="min-width: 160px;">Name</th>
          <th>Description</th>
          <th style="width: 120px;">Price</th>
          <th style="width: 110px;">Stock</th>
          <th style="width: 220px;">Actions</th>
        </tr>
      </thead>
      <tbody>
        {{#each products}}
          <tr data-id="{{this._id}}">
            <td><input class="form-control form-control-sm" name="name" value="{{this.name}}" /></td>
            <td><input class="form-control form-control-sm" name="description" value="{{this.description}}" /></td>
            <td><input class="form-control form-control-sm" name="price" type="number" step="0.01" min="0" value="{{this.priceFmt}}" /></td>
            <td><input class="form-control form-control-sm" name="quantityInStock" type="number" step="1" min="0" value="{{this.quantityInStock}}" /></td>
            <td class="d-flex gap-2">
              <button class="btn btn-sm btn-primary js-save">Save</button>
              <button class="btn btn-sm btn-outline-danger js-delete">Delete</button>
              <span class="small text-muted ms-2 js-status"></span>
            </td>
          </tr>
        {{/each}}
      </tbody>
    </table>
  </div>
{{else}}
  <div class="alert alert-info">No products yet. Add one above.</div>
{{/if}}

<script>
  // small helper to read a row into a plain object
  function readRow(tr) {
    const get = (sel) => tr.querySelector(sel)?.value ?? '';
    return {
      name: get('input[name="name"]').trim(),
      description: get('input[name="description"]').trim(),
      price: parseFloat(get('input[name="price"]')),
      quantityInStock: parseInt(get('input[name="quantityInStock"]'), 10),
    };
  }

  // Create product
  document.getElementById('createForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const form = e.currentTarget;
    const msg = document.getElementById('createMsg');

    const data = {
      name: form.name.value.trim(),
      description: form.description.value.trim(),
      price: parseFloat(form.price.value),
      quantityInStock: parseInt(form.quantityInStock.value, 10),
    };

    if (!data.name || Number.isNaN(data.price) || Number.isNaN(data.quantityInStock)) {
      msg.textContent = 'Please fill all fields correctly.';
      return;
    }

    try {
      msg.textContent = 'Saving...';
      const res = await fetch('/api/products', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      const out = await res.json();
      if (!res.ok) throw new Error(out.error || 'Failed to create');
      location.reload(); // simple refresh to see the new row
    } catch (err) {
      msg.textContent = err.message;
    }
  });

  // Save / Delete handlers per row
  document.querySelectorAll('tr[data-id]').forEach((tr) => {
    const id = tr.getAttribute('data-id');
    const saveBtn = tr.querySelector('.js-save');
    const delBtn = tr.querySelector('.js-delete');
    const status = tr.querySelector('.js-status');

    saveBtn.addEventListener('click', async () => {
      const payload = readRow(tr);
      if (!payload.name || Number.isNaN(payload.price) || Number.isNaN(payload.quantityInStock)) {
        status.textContent = 'Fix fields';
        return;
      }
      try {
        status.textContent = 'Saving...';
        const res = await fetch(`/api/products/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });
        const out = await res.json();
        if (!res.ok) throw new Error(out.error || 'Failed to update');
        status.textContent = 'Saved ✓';
        setTimeout(() => (status.textContent = ''), 1200);
      } catch (err) {
        status.textContent = err.message;
      }
    });

    delBtn.addEventListener('click', async () => {
      if (!confirm('Delete this product?')) return;
      try {
        status.textContent = 'Deleting...';
        const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
        const out = await res.json();
        if (!res.ok) throw new Error(out.error || 'Failed to delete');
        tr.remove();
      } catch (err) {
        status.textContent = err.message;
      }
    });
  });
</script>
